'use strict';

const fs = require('fs');
const winston = require('winston');
const request = require('request');
const jsonwebtoken = require('jsonwebtoken');
const host = "https://dev1.soichi.us";

exports.sca = {
    auth_api: "https://dev1.soichi.us/api/auth",

    //jwt token used to access other services (like auth service)
    jwt: fs.readFileSync(__dirname+'/event.jwt', {encoding: 'ascii'}).trim(),
}

//warning.. you don't get error message if your user/pass etc. are incorrect (it just keeps retrying silently..)
exports.event = {
    amqp: {
        url: "amqp://event:eventpass123@localhost:5672/brainlife"
    },
    
    //list of exchanges that this service supports and check_access cb
    //in check_access, you can make 3rd party api call to check for user access
    //or just check the jwt sent from the client (TODO is this really possible via websocket?)

    exchanges: {

        "wf.task": function(req, bind, cb) {
            let instance_id = bind.key.split(".")[0];
            request.get({
                url: host+"/api/wf/event/checkaccess/instance/"+instance_id, json: true,
                headers: {'Authorization': 'Bearer '+req.query.jwt}
            }, function(err, res, body) {
                cb(err, (body.status == "ok"));
            });
           
            //checking access for key
            /*
            var sub = bind.key.split(".")[0];
            request.get({
                url: host+"/api/wf/event/checkaccess/user/"+sub,
                json: true,
                headers: {'Authorization': 'Bearer '+req.query.jwt}
            }, function(err, res, body) {
                cb(err, (body.status == "ok"));
            });
            */
            /*
            var sub = bind.key.split(".")[0];
            if(sub == req.user.sub) cb(null, true);
            else cb(null, false);
            */
        },

        "wf.instance": function(req, bind, cb) {
            //TODO .. I currently don't have a good way to let user subscribe to *all* instances that
            //user has access to .. like "*.*". 
            //since instance doesn't contain important info (other than name / status).. so let's make
            //it wide open until I can figure out how to apply access control (I think I need to 
            //query all instances that user has access to, and make amqp subscribe to each?
            cb(null, true);

            /*
            let instance = bind.key.split(".")[0];
            request.get({
                url: host+"/api/wf/event/checkaccess/instance/"+instance, json: true,
                headers: {'Authorization': 'Bearer '+req.query.jwt}
            }, function(err, res, body) {
                cb(err, (body.status == "ok"));
            });
            */
            
            //checking access for key
            /*
            var sub = bind.key.split(".")[0];
            request.get({
                url: host+"/api/wf/event/checkaccess/user/"+sub,
                json: true,
                headers: {'Authorization': 'Bearer '+req.query.jwt}
            }, function(err, res, body) {
                cb(err, (body.status == "ok"));
            });
            */
            /*
            var sub = bind.key.split(".")[0];
            if(sub == req.user.sub) cb(null, true);
            else cb(null, false);
            */
        },

        "warehouse.dataset": function(req, bind, cb) {
            //checking access for key
            var project = bind.key.split(".")[0];
            console.log("checking warehouse.dataset access", project);
            request.get({
                url: host+"/api/warehouse/event/checkaccess/project/"+project,
                json: true,
                headers: {'Authorization': 'Bearer '+req.query.jwt}
            }, function(err, res, body) {
                cb(err, (body.status == "ok"));
            });
        },
    }
}

exports.handler = {
    email: {
        from: "brlife@iu.edu",
    },

    mailer: {
        host: 'mail-relay.iu.edu',
        secure: true,
        auth: {
            user: 'brlife',
            pass: fs.readFileSync(__dirname+'/smtp.password', {encoding: 'ascii'}).trim(),
        }
    },
}

exports.mongodb = "mongodb://localhost/event";

exports.express = {
    port: 12348,
    pubkey: fs.readFileSync('/home/hayashis/git/auth/api/config/auth.pub'),
}

exports.logger = {
    winston: {
        //hide header that might contain jwt
        requestWhitelist: ['url', /*'headers',*/ 'method', 'httpVersion', 'originalUrl', 'query'],
        transports: [
            //display all logs to console
            new winston.transports.Console({
                timestamp: function() {
                    var d = new Date();
                    return d.toString(); //show timestamp
                },
                colorize: true,
                level: 'debug'
            }),
        ]
    },
}
